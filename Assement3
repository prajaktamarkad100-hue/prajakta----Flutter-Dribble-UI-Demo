import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(RecipeApp());
}

class RecipeApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firebase Recipe App',
      debugShowCheckedModeBanner: false,
      home: RecipeListScreen(),
    );
  }
}

class RecipeListScreen extends StatelessWidget {
  final CollectionReference recipes =
      FirebaseFirestore.instance.collection('recipes');

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('ðŸ“š Recipes')),
      body: StreamBuilder<QuerySnapshot>(
        stream: recipes.snapshots(),
        builder: (context, snapshot) {
          if (!snapshot.hasData) return Center(child: CircularProgressIndicator());

          final docs = snapshot.data!.docs;
          return ListView.builder(
            itemCount: docs.length,
            itemBuilder: (context, index) {
              var recipe = docs[index];
              return ListTile(
                title: Text(recipe['title']),
                onTap: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (_) => RecipeDetailScreen(recipeId: recipe.id),
                    ),
                  );
                },
              );
            },
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.add),
        onPressed: () => Navigator.push(
          context,
          MaterialPageRoute(
            builder: (_) => RecipeFormScreen(),
          ),
        ),
      ),
    );
  }
}

class RecipeDetailScreen extends StatelessWidget {
  final String recipeId;

  RecipeDetailScreen({required this.recipeId});

  @override
  Widget build(BuildContext context) {
    final recipeRef =
        FirebaseFirestore.instance.collection('recipes').doc(recipeId);

    return Scaffold(
      appBar: AppBar(title: Text('Recipe Details')),
      body: FutureBuilder<DocumentSnapshot>(
        future: recipeRef.get(),
        builder: (context, snapshot) {
          if (!snapshot.hasData) return Center(child: CircularProgressIndicator());
          var data = snapshot.data!.data() as Map<String, dynamic>;

          return Padding(
            padding: EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(data['title'], style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
                SizedBox(height: 10),
                Image.network(data['imageUrl'], height: 200, fit: BoxFit.cover),
                SizedBox(height: 10),
                Text("Ingredients:\n${data['ingredients']}"),
                SizedBox(height: 10),
                Text("Instructions:\n${data['instructions']}"),
                Spacer(),
                Row(
                  children: [
                    ElevatedButton(
                      child: Text('Edit'),
                      onPressed: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (_) => RecipeFormScreen(
                              recipeId: recipeId,
                              existingData: data,
                            ),
                          ),
                        );
                      },
                    ),
                    SizedBox(width: 10),
                    ElevatedButton(
                      style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                      child: Text('Delete'),
                      onPressed: () async {
                        await recipeRef.delete();
                        Navigator.pop(context);
                      },
                    ),
                  ],
                )
              ],
            ),
          );
        },
      ),
    );
  }
}

class RecipeFormScreen extends StatefulWidget {
  final String? recipeId;
  final Map<String, dynamic>? existingData;

  RecipeFormScreen({this.recipeId, this.existingData});

  @override
  State<RecipeFormScreen> createState() => _RecipeFormScreenState();
}

class _RecipeFormScreenState extends State<RecipeFormScreen> {
  final _formKey = GlobalKey<FormState>();
  String title = '';
  String ingredients = '';
  String instructions = '';
  String imageUrl = '';

  @override
  void initState() {
    super.initState();
    if (widget.existingData != null) {
      title = widget.existingData!['title'];
      ingredients = widget.existingData!['ingredients'];
      instructions = widget.existingData!['instructions'];
      imageUrl = widget.existingData!['imageUrl'];
    }
  }

  @override
  Widget build(BuildContext context) {
    final recipes = FirebaseFirestore.instance.collection('recipes');

    return Scaffold(
      appBar: AppBar(title: Text(widget.recipeId == null ? 'Add Recipe' : 'Edit Recipe')),
      body: Padding(
        padding: EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              TextFormField(
                initialValue: title,
                decoration: InputDecoration(labelText: 'Title'),
                onChanged: (val) => title = val,
                validator: (val) => val!.isEmpty ? 'Enter title' : null,
              ),
              TextFormField(
                initialValue: ingredients,
                decoration: InputDecoration(labelText: 'Ingredients'),
                onChanged: (val) => ingredients = val,
                validator: (val) => val!.isEmpty ? 'Enter ingredients' : null,
              ),
              TextFormField(
                initialValue: instructions,
                decoration: InputDecoration(labelText: 'Instructions'),
                onChanged: (val) => instructions = val,
                validator: (val) => val!.isEmpty ? 'Enter instructions' : null,
              ),
              TextFormField(
                initialValue: imageUrl,
                decoration: InputDecoration(labelText: 'Image URL'),
                onChanged: (val) => imageUrl = val,
                validator: (val) => val!.isEmpty ? 'Enter image URL' : null,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                child: Text('Save'),
                onPressed: () async {
                  if (_formKey.currentState!.validate()) {
                    if (widget.recipeId == null) {
                      await recipes.add({
                        'title': title,
                        'ingredients': ingredients,
                        'instructions': instructions,
                        'imageUrl': imageUrl
                      });
                    } else {
                      await recipes.doc(widget.recipeId).update({
                        'title': title,
                        'ingredients': ingredients,
                        'instructions': instructions,
                        'imageUrl': imageUrl
                      });
                    }
                    Navigator.pop(context);
                  }
                },
              )
            ],
          ),
        ),
      ),
    );
  }
}
